import pygame
import sys
pygame.init()
win = pygame.display.set_mode((1250,800))
BG = pygame.image.load('BG.png')
BG = pygame.transform.scale(BG,(1250,800))


count = 0

while 1:
	if count == 0:
		music = pygame.mixer.music.load('menmusic.mp3')
                pygame.mixer.music.play(-1)		
		class button():
		    count = 0
		    def __init__(self, color, x,y,width,height, text=''):
			self.color = color
			self.x = x
			self.y = y
			self.width = width
			self.height = height
			self.text = text

		    def draw(self,win,outline=None):
			#Call this method to draw the button on the screen
			if outline:
			    pygame.draw.rect(win, outline, (self.x-2,self.y-2,self.width+4,self.height+4),0)
			    
			pygame.draw.rect(win, self.color, (self.x,self.y,self.width,self.height),0)
			
			if self.text != '':
			    font = pygame.font.SysFont('comicsans', 30)
			    text = font.render(self.text, 1, (0,0,0))
			    win.blit(text, (self.x + (self.width/2 - text.get_width()/2), self.y + (self.height/2 - text.get_height()/2)))

		    def isOver(self, pos):
			#Pos is the mouse position or a tuple of (x,y) coordinates
			if pos[0] > self.x and pos[0] < self.x + self.width:
			    if pos[1] > self.y and pos[1] < self.y + self.height:
				return True
			    
			return False

		def redrawWindow():
			win.blit(BG,(0,0))
			greenButton.draw(win,(0,0,0))
			redButton.draw(win,(0,0,0))
			blueButton.draw(win,(0,0,0))
			instructions.draw(win,(0,0,0))
			
			qt.draw(win,(0,0,0))
		run = True
		greenButton = button((0,255,0), 10, 250, 100, 50, 'EASY')
		redButton = button((225,0,0), 10, 330, 100, 50, 'MEDIUM')
		blueButton = button((0,0,255), 10, 410, 100, 50, 'HARD')
		instructions = button((255,255,255), 1030, 230, 200, 50, 'INSTRUCTIONS')
		qt = button((255,255,255), 1030, 300,200, 50, 'QUIT')
                instrucButton = button((255,255,255),1030, 400, 200,50,'BACK')

		while run:
			redrawWindow()
			pygame.display.update()

			for event in pygame.event.get():
			    pos = pygame.mouse.get_pos()

			    if event.type == pygame.QUIT:
				count = 0				
				run = False
				pygame.quit()
				quit()

			    if event.type == pygame.MOUSEBUTTONDOWN:
				if greenButton.isOver(pos):
					count = 1                        
				if redButton.isOver(pos):
                                        count = 2
				if blueButton.isOver(pos):
                                        count = 3
				if instructions.isOver(pos):
				        count = 4
		                if instrucButton.isOver(pos):
					count = 0
		                if qt.isOver(pos):
		                        sys.exit()
		                        
			    if event.type == pygame.MOUSEMOTION:
				
				if greenButton.isOver(pos):
				    greenButton.color = (255,255,255)
				else:
			    	    greenButton.color = (0,255,0)
				if redButton.isOver(pos):
				    redButton.color = (255,255,255)
				else: 
				    redButton.color = (255,0,0)
				if blueButton.isOver(pos):
				    blueButton.color=(255,255,255)
				else:
				    blueButton.color=(0,0,255)
				if instructions.isOver(pos):
				    instructions.color=(120, 10, 120)
				else:
				    instructions.color=(255,255,255)
				if qt.isOver(pos):
				    qt.color=(120, 10, 120)
				else:
				    qt.color=(255,255,255)
		                if instrucButton.isOver(pos):
				    instrucButton.color=(0,0,255)
				else:
				    instrucButton.color=(255,255,255)
			
		      	if count == 4:
				#count = 0
				import pygame
				#import sys
				pygame.display.update()
				pygame.init()
				win = pygame.display.set_mode((1250,800))
				BG = pygame.image.load('instructions.jpg')
				BG = pygame.transform.scale(BG,(1250,800))
				class button():
						
					def __init__(self, color, x,y,width,height, text=''):
						self.color = color
						self.x = x
						self.y = y
						self.width = width
						self.height = height
						self.text = text
						def draw(self,win,outline=None):
						#Call this method to draw the button on the screen
							if outline:
								pygame.draw.rect(win, outline, (self.x-2,self.y-2,self.width+4,self.height+4),0)
								    
								pygame.draw.rect(win, self.color, (self.x,self.y,self.width,self.height),0)
								
							if self.text != '':
								font = pygame.font.SysFont('comicsans', 30)
								text = font.render(self.text, 1, (0,0,0))
								win.blit(text, (self.x + (self.width/2 - text.get_width()/2), self.y + (self.height/2 - text.get_height()/2)))

						def isOver(self, pos):
							#Pos is the mouse position or a tuple of (x,y) coordinates
							if pos[0] > self.x and pos[0] < self.x + self.width:
								if pos[1] > self.y and pos[1] < self.y + self.height:
									return True
								    
							return False
						instrucButton = button((255,255,255),1030, 300, 200,50,'BACK')

				        def redrawGameWindow():
						win.blit(BG,(0,0))
						instrucButton.draw(win,(0,0,0))
                                               # pygame.display.update()
					run = True
                                        count = 0
                                        redrawGameWindow()
				
		      	if count == 1:
				import pygame
				import random
				import time
				pygame.init()

				win = pygame.display.set_mode((1250,700))

				pygame.display.set_caption("Voltrox")


				bg = pygame.transform.scale(pygame.image.load('ProjectBG.jpeg'),(1250,700))

				clock = pygame.time.Clock()

				music = pygame.mixer.music.load('music.mp3')
				pygame.mixer.music.play(-1)

				score = 0

				class player(object):
				    stand = pygame.transform.scale(pygame.image.load('astand.png'),(40,64))
				    walkRight = [pygame.transform.scale(pygame.image.load('awalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('awalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('awalkl1.png'),(40,64)), pygame.transform.scale(pygame.image.load('awalkl2.png'),(40,64))]
				    def __init__(self,x,y,width,heigth):
					self.x = x
					self.y = y
					self.width = width
					self.heigth = heigth
					self.vel = 10
					self.left = False
					self.right = False
					self.walkCount = 0
					self.standing = True
					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					self.health = 200
				    def draw(self, win):
					if self.walkCount + 1 >= 4:
					    self.walkCount = 0
					if not(self.standing):
					    if self.left:
						win.blit(self.walkLeft[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					    elif self.right:
						win.blit(self.walkRight[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					else:
					    if self.right:
						win.blit(self.walkRight[0], (self.x,self.y))
					    else:
						win.blit(self.walkLeft[0], (self.x, self.y))

					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health//20)), 10))
				    def hit(self):
					if self.health>0:
					    self.health-=1
				class projectile(object):
				    def __init__(self,x,y,radius,color,facing):
					self.x = x
					self.y = y
					self.radius = radius
					self.color = color
					self.facing = facing
					self.vel = 1 * facing
				    def draw(self,win):
					pygame.draw.circle(win, self.color, (self.x-10,self.y),self.radius)
				class enemy(object):
				    walkRight = [pygame.transform.scale(pygame.image.load('zwalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('zwalkl1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkl2.png'),(40,64))]

				    def __init__(self, x, y, width, height, end):
					self.x = x
					self.y = y
					self.width = width
					self.height = height
					self.path = [x, end]
					self.walkCount = 0
					self.vel = 3
					self.hitbox = (self.x + 17, self.y + 2, 31, 57)
					self.health = 5

				    def draw(self, win):
					self.move()
					if self.walkCount + 1 >= 6:
					    self.walkCount = 0

					if self.vel > 0:
					    win.blit(self.walkRight[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					else:
					    win.blit(self.walkLeft[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health*2)), 10))
					self.hitbox = (self.x + 7, self.y + 12, 31, 57)
					#pygame.draw.rect(win, (255, 0, 0), self.hitbox,2)
				    def move(self):
					if self.vel > 0:
					    if self.x < self.path[1] - self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0
					else:
					    if self.x > self.path[0] + self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0

				    def hit(self):
					if self.health > 0:
					    self.health -= 1

				def redrawGameWindow():
				    win.blit(bg,(0,0))
				    text = font.render('Score: ' + str(score), 3, (0,250,0))
				    win.blit(text, (900, 10))
				    man.draw(win)
				    for goblin in goblins:
					goblin.draw(win)
				    for bullet in bullets:
					bullet.draw(win)

				    pygame.display.update()

				#mainloop
				font = pygame.font.SysFont('comicsans', 30, True)
				man = player(200, 400, 64, 64)
				goblins = [enemy(2000,2000,64,64,2500)]
				shootloop = 0
				delay = float(0)
				Nstage = False
				bullets = []
				x = 0

				run = True
				while run:
				    clock.tick(12)

				    if score > 300:
					Nstage = True

				    if not(Nstage):
					x = 1
				    else:
					x = 2

				    if delay%250 == 0: 
					for j in range(x):
					    m = random.randint(0,man.x - 40)
					    n = random.randint(50,man.y - 40)
					    x = random.randint(man.x + 50,1151)
					    y = random.randint(man.y + 50,651)
					    goblins.append(enemy(m,n,64,64,m+50))
					    goblins.append(enemy(x,n,64,64,x+50))
					    goblins.append(enemy(m,y,64,64,m+50))
					    goblins.append(enemy(x,y,64,64,x+50))  

				    for goblin in goblins:
					if man.hitbox[1] < goblin.hitbox[1] + goblin.hitbox[3] and man.hitbox[1] + man.hitbox[3] > goblin.hitbox[1]:
					    if man.hitbox[0] + man.hitbox[2] > goblin.hitbox[0] and man.hitbox[0] < goblin.hitbox[0] + goblin.hitbox[2]:
						man.hit()

				    if shootloop > 0:
					shootloop += 1


				    if shootloop > 5:
					shootloop = 0

				    #Checking for events
				    for event in pygame.event.get():
					if event.type == pygame.QUIT or man.health == 0:
					    run = False
				    for goblin in goblins:
					if goblin.health <= 0:
					    goblins.pop(goblins.index(goblin))
					for bullet in bullets:
					    if bullet.y - bullet.radius < goblin.hitbox[1] + goblin.hitbox[3] and bullet.y + bullet.radius > goblin.hitbox[1]:
						if bullet.x + bullet.radius > goblin.hitbox[0] and bullet.x - bullet.radius < goblin.hitbox[0] + goblin.hitbox[2]:
						    goblin.hit()
						    score+=5
						    bullets.pop(bullets.index(bullet))
					    if bullet.x < 1250 and bullet.x > 0:
						bullet.x += bullet.vel
					    else:
						bullets.pop(bullets.index(bullet))
				    keys = pygame.key.get_pressed()

				    if keys[pygame.K_SPACE] and shootloop == 0:
					if man.left:
					    facing = -1
					else:
					    facing = 1

					if len(bullets) < 5:
					    bullets.append(projectile(int(round(man.x + man.width //2)),int(round(man.y +man.heigth//2)), 6, (0,0,0), facing))

					    shootloop = 1

				    #The and statements are used for constraining the movement of the rectangle
				    if keys[pygame.K_LEFT] and man.x > 50:
					man.x -= man.vel
					man.left = True
					man.right = False
					man.standing = False
				    elif keys[pygame.K_RIGHT] and man.x < 1100:
					man.x += man.vel
					man.left = False
					man.right = True
					man.standing = False
				    elif keys[pygame.K_UP] and man.y > 90:
					man.y -= man.vel
					man.left = False
					man.right = False
					man.standing = True
				    elif keys[pygame.K_DOWN] and man.y < 600:
					man.y += man.vel
					man.left = False
					man.right = False
					man.standing = True
				    else:
					man.standing = True

				    delay+=1

				    count = 0
					
				    redrawGameWindow()

                        if count == 2:
				import pygame
				import random
				import time
				pygame.init()

				win = pygame.display.set_mode((1250,700))

				pygame.display.set_caption("Voltrox")


				bg = pygame.transform.scale(pygame.image.load('ProjectBG.jpeg'),(1250,700))

				clock = pygame.time.Clock()

				music = pygame.mixer.music.load('music.mp3')
				pygame.mixer.music.play(-1)

				score = 0

				class player(object):
				    stand = pygame.transform.scale(pygame.image.load('astand.png'),(40,64))
				    walkRight = [pygame.transform.scale(pygame.image.load('awalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('awalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('awalkl1.png'),(40,64)), pygame.transform.scale(pygame.image.load('awalkl2.png'),(40,64))]
				    def __init__(self,x,y,width,heigth):
					self.x = x
					self.y = y
					self.width = width
					self.heigth = heigth
					self.vel = 10
					self.left = False
					self.right = False
					self.walkCount = 0
					self.standing = True
					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					self.health = 150
				    def draw(self, win):
					if self.walkCount + 1 >= 4:
					    self.walkCount = 0
					if not(self.standing):
					    if self.left:
						win.blit(self.walkLeft[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					    elif self.right:
						win.blit(self.walkRight[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					else:
					    if self.right:
						win.blit(self.walkRight[0], (self.x,self.y))
					    else:
						win.blit(self.walkLeft[0], (self.x, self.y))

					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health//15)), 10))
				    def hit(self):
					if self.health>0:
					    self.health-=1
				class projectile(object):
				    def __init__(self,x,y,radius,color,facing):
					self.x = x
					self.y = y
					self.radius = radius
					self.color = color
					self.facing = facing
					self.vel = 1 * facing
				    def draw(self,win):
					pygame.draw.circle(win, self.color, (self.x-10,self.y),self.radius)
				class enemy(object):
				    walkRight = [pygame.transform.scale(pygame.image.load('zwalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('zwalkl1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkl2.png'),(40,64))]

				    def __init__(self, x, y, width, height, end):
					self.x = x
					self.y = y
					self.width = width
					self.height = height
					self.path = [x, end]
					self.walkCount = 0
					self.vel = 3
					self.hitbox = (self.x + 17, self.y + 2, 31, 57)
					self.health = 5

				    def draw(self, win):
					self.move()
					if self.walkCount + 1 >= 6:
					    self.walkCount = 0

					if self.vel > 0:
					    win.blit(self.walkRight[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					else:
					    win.blit(self.walkLeft[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health*2)), 10))
					self.hitbox = (self.x + 7, self.y + 12, 31, 57)
					#pygame.draw.rect(win, (255, 0, 0), self.hitbox,2)
				    def move(self):
					if self.vel > 0:
					    if self.x < self.path[1] - self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0
					else:
					    if self.x > self.path[0] + self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0

				    def hit(self):
					if self.health > 0:
					    self.health -= 1

				def redrawGameWindow():
				    win.blit(bg,(0,0))
				    text = font.render('Score: ' + str(score), 3, (0,250,0))
				    win.blit(text, (900, 10))
				    man.draw(win)
				    for goblin in goblins:
					goblin.draw(win)
				    for bullet in bullets:
					bullet.draw(win)

				    pygame.display.update()

				#mainloop
				font = pygame.font.SysFont('comicsans', 30, True)
				man = player(200, 400, 64, 64)
				goblins = [enemy(2000,2000,64,64,2500)]
				shootloop = 0
				delay = float(0)
				Nstage = False
				bullets = []
				x = 0

				run = True
				while run:
				    clock.tick(12)

				    if score > 300:
					Nstage = True

				    if not(Nstage):
					x = 2
				    else:
					x = 3

				    if delay%200 == 0: 
					for j in range(x):
					    m = random.randint(0,man.x - 40)
					    n = random.randint(50,man.y - 40)
					    x = random.randint(man.x + 50,1151)
					    y = random.randint(man.y + 50,651)
					    goblins.append(enemy(m,n,64,64,m+50))
					    goblins.append(enemy(x,n,64,64,x+50))
					    goblins.append(enemy(m,y,64,64,m+50))
					    goblins.append(enemy(x,y,64,64,x+50))  

				    for goblin in goblins:
					if man.hitbox[1] < goblin.hitbox[1] + goblin.hitbox[3] and man.hitbox[1] + man.hitbox[3] > goblin.hitbox[1]:
					    if man.hitbox[0] + man.hitbox[2] > goblin.hitbox[0] and man.hitbox[0] < goblin.hitbox[0] + goblin.hitbox[2]:
						man.hit()

				    if shootloop > 0:
					shootloop += 1


				    if shootloop > 5:
					shootloop = 0

				    #Checking for events
				    for event in pygame.event.get():
					if event.type == pygame.QUIT or man.health == 0:
					    run = False
				    for goblin in goblins:
					if goblin.health <= 0:
					    goblins.pop(goblins.index(goblin))
					for bullet in bullets:
					    if bullet.y - bullet.radius < goblin.hitbox[1] + goblin.hitbox[3] and bullet.y + bullet.radius > goblin.hitbox[1]:
						if bullet.x + bullet.radius > goblin.hitbox[0] and bullet.x - bullet.radius < goblin.hitbox[0] + goblin.hitbox[2]:
						    goblin.hit()
						    score+=5
						    bullets.pop(bullets.index(bullet))
					    if bullet.x < 1250 and bullet.x > 0:
						bullet.x += bullet.vel
					    else:
						bullets.pop(bullets.index(bullet))
				    keys = pygame.key.get_pressed()

				    if keys[pygame.K_SPACE] and shootloop == 0:
					if man.left:
					    facing = -1
					else:
					    facing = 1

					if len(bullets) < 5:
					    bullets.append(projectile(int(round(man.x + man.width //2)),int(round(man.y +man.heigth//2)), 6, (0,0,0), facing))

					    shootloop = 1

				    #The and statements are used for constraining the movement of the rectangle
				    if keys[pygame.K_LEFT] and man.x > 50:
					man.x -= man.vel
					man.left = True
					man.right = False
					man.standing = False
				    elif keys[pygame.K_RIGHT] and man.x < 1100:
					man.x += man.vel
					man.left = False
					man.right = True
					man.standing = False
				    elif keys[pygame.K_UP] and man.y > 90:
					man.y -= man.vel
					man.left = False
					man.right = False
					man.standing = True
				    elif keys[pygame.K_DOWN] and man.y < 600:
					man.y += man.vel
					man.left = False
					man.right = False
					man.standing = True
				    else:
					man.standing = True

				    delay+=1

				    count = 0
					
				    redrawGameWindow()

                        if count == 3:  
				import pygame
				import random
				import time
				pygame.init()

				win = pygame.display.set_mode((1250,700))

				pygame.display.set_caption("Voltrox")


				bg = pygame.transform.scale(pygame.image.load('ProjectBG.jpeg'),(1250,700))

				clock = pygame.time.Clock()

				music = pygame.mixer.music.load('music.mp3')
				pygame.mixer.music.play(-1)

				score = 0

				class player(object):
				    stand = pygame.transform.scale(pygame.image.load('astand.png'),(40,64))
				    walkRight = [pygame.transform.scale(pygame.image.load('awalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('awalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('awalkl1.png'),(40,64)), pygame.transform.scale(pygame.image.load('awalkl2.png'),(40,64))]
				    def __init__(self,x,y,width,heigth):
					self.x = x
					self.y = y
					self.width = width
					self.heigth = heigth
					self.vel = 10
					self.left = False
					self.right = False
					self.walkCount = 0
					self.standing = True
					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					self.health = 100
				    def draw(self, win):
					if self.walkCount + 1 >= 4:
					    self.walkCount = 0
					if not(self.standing):
					    if self.left:
						win.blit(self.walkLeft[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					    elif self.right:
						win.blit(self.walkRight[self.walkCount//2],(self.x,self.y))
						self.walkCount += 1
					else:
					    if self.right:
						win.blit(self.walkRight[0], (self.x,self.y))
					    else:
						win.blit(self.walkLeft[0], (self.x, self.y))

					self.hitbox = (self.x + 17, self.y + 11, 29, 52)
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health//10)), 10))
				    def hit(self):
					if self.health>0:
					    self.health-=1
				class projectile(object):
				    def __init__(self,x,y,radius,color,facing):
					self.x = x
					self.y = y
					self.radius = radius
					self.color = color
					self.facing = facing
					self.vel = 1 * facing
				    def draw(self,win):
					pygame.draw.circle(win, self.color, (self.x-10,self.y),self.radius)
				class enemy(object):
				    walkRight = [pygame.transform.scale(pygame.image.load('zwalkr1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkr2.png'),(40,64))]
				    walkLeft = [pygame.transform.scale(pygame.image.load('zwalkl1.png'),(40,64)),pygame.transform.scale(pygame.image.load('zwalkl2.png'),(40,64))]

				    def __init__(self, x, y, width, height, end):
					self.x = x
					self.y = y
					self.width = width
					self.height = height
					self.path = [x, end]
					self.walkCount = 0
					self.vel = 3
					self.hitbox = (self.x + 17, self.y + 2, 31, 57)
					self.health = 5

				    def draw(self, win):
					self.move()
					if self.walkCount + 1 >= 6:
					    self.walkCount = 0

					if self.vel > 0:
					    win.blit(self.walkRight[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					else:
					    win.blit(self.walkLeft[self.walkCount//3], (self.x,self.y))
					    self.walkCount += 1
					pygame.draw.rect(win, (255,0,0), (self.hitbox[0],self.hitbox[1] - 20,50,10))
					pygame.draw.rect(win, (0,128,0), (self.hitbox[0],self.hitbox[1] - 20,50 - (5 * (10 - self.health*2)), 10))
					self.hitbox = (self.x + 7, self.y + 12, 31, 57)
					#pygame.draw.rect(win, (255, 0, 0), self.hitbox,2)
				    def move(self):
					if self.vel > 0:
					    if self.x < self.path[1] - self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0
					else:
					    if self.x > self.path[0] + self.vel:
						self.x += self.vel
					    else:
						self.vel = self.vel * -1
						self.walkCount = 0

				    def hit(self):
					if self.health > 0:
					    self.health -= 1

				def redrawGameWindow():
				    win.blit(bg,(0,0))
				    text = font.render('Score: ' + str(score), 3, (0,250,0))
				    win.blit(text, (900, 10))
				    man.draw(win)
				    for goblin in goblins:
					goblin.draw(win)
				    for bullet in bullets:
					bullet.draw(win)

				    pygame.display.update()

				#mainloop
				font = pygame.font.SysFont('comicsans', 30, True)
				man = player(200, 400, 64, 64)
				goblins = [enemy(2000,2000,64,64,2500)]
				shootloop = 0
				delay = float(0)
				Nstage = False
				bullets = []
				x = 0

				run = True
				while run:
				    clock.tick(12)

				    if score > 200:
					Nstage = True

				    if not(Nstage):
					x = 3
				    else:
					x = 4

				    if delay%150 == 0: 
					for j in range(x):
					    m = random.randint(0,man.x - 40)
					    n = random.randint(50,man.y - 40)
					    x = random.randint(man.x + 50,1151)
					    y = random.randint(man.y + 50,651)
					    goblins.append(enemy(m,n,64,64,m+50))
					    goblins.append(enemy(x,n,64,64,x+50))
					    goblins.append(enemy(m,y,64,64,m+50))
					    goblins.append(enemy(x,y,64,64,x+50))  

				    for goblin in goblins:
					if man.hitbox[1] < goblin.hitbox[1] + goblin.hitbox[3] and man.hitbox[1] + man.hitbox[3] > goblin.hitbox[1]:
					    if man.hitbox[0] + man.hitbox[2] > goblin.hitbox[0] and man.hitbox[0] < goblin.hitbox[0] + goblin.hitbox[2]:
						man.hit()

				    if shootloop > 0:
					shootloop += 1


				    if shootloop > 5:
					shootloop = 0

				    #Checking for events
				    for event in pygame.event.get():
					if event.type == pygame.QUIT or man.health == 0:
					    run = False
				    for goblin in goblins:
					if goblin.health <= 0:
					    goblins.pop(goblins.index(goblin))
					for bullet in bullets:
					    if bullet.y - bullet.radius < goblin.hitbox[1] + goblin.hitbox[3] and bullet.y + bullet.radius > goblin.hitbox[1]:
						if bullet.x + bullet.radius > goblin.hitbox[0] and bullet.x - bullet.radius < goblin.hitbox[0] + goblin.hitbox[2]:
						    goblin.hit()
						    score+=5
						    bullets.pop(bullets.index(bullet))
					    if bullet.x < 1250 and bullet.x > 0:
						bullet.x += bullet.vel
					    else:
						bullets.pop(bullets.index(bullet))
				    keys = pygame.key.get_pressed()

				    if keys[pygame.K_SPACE] and shootloop == 0:
					if man.left:
					    facing = -1
					else:
					    facing = 1

					if len(bullets) < 5:
					    bullets.append(projectile(int(round(man.x + man.width //2)),int(round(man.y +man.heigth//2)), 6, (0,0,0), facing))

					    shootloop = 1

				    #The and statements are used for constraining the movement of the rectangle
				    if keys[pygame.K_LEFT] and man.x > 50:
					man.x -= man.vel
					man.left = True
					man.right = False
					man.standing = False
				    elif keys[pygame.K_RIGHT] and man.x < 1100:
					man.x += man.vel
					man.left = False
					man.right = True
					man.standing = False
				    elif keys[pygame.K_UP] and man.y > 90:
					man.y -= man.vel
					man.left = False
					man.right = False
					man.standing = True
				    elif keys[pygame.K_DOWN] and man.y < 600:
					man.y += man.vel
					man.left = False
					man.right = False
					man.standing = True
				    else:
					man.standing = True

				    delay+=1

				    count = 0
					
				    redrawGameWindow()
  
